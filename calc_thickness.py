#coding=utf-8
import matplotlib.pyplot as plt
import numpy as np

wave = [32378, 126, 0, 0, 65394, 65535, 65535, 65535, 49151, 0, 0, 0, 0, 0, 0, 65443, 65535, 65535, 65535, 65535, 16058,
        0, 0, 38144, 65535, 65535, 65535, 15833, 0, 0, 0, 19968, 65473, 65535, 65535, 58367, 20887, 23, 0, 7168, 30024,
        48541, 55249, 49873, 37548, 26234, 20567, 22352, 28514, 34941, 38289, 37269, 33675, 30076, 28529, 29552, 32120,
        34947, 35979, 34698, 32387, 29816, 28785, 29553, 31863, 34177, 35465, 34697, 33156, 31357, 30327, 30582, 31608,
        32637, 33152, 33154, 32897, 32382, 32125, 32125, 32382, 32382, 32382, 32125, 31868, 32124, 32125, 32638, 32639,
        32639, 32126, 31868, 31868, 32124, 32638, 33152, 32897, 32383, 31612, 31098, 31097, 32123, 33151, 33923, 33668,
        32898, 31613, 30841, 30839, 31609, 32637, 33409, 33666, 33154, 32384, 31613, 31098, 30840, 31609, 33406, 35206,
        35723, 33416, 29050, 25192, 24927, 30313, 38790, 45478, 44980, 36258, 23155, 13636, 14385, 25930, 42373, 53952,
        53207, 40891, 24190, 12610, 12330, 22849, 36981, 47015, 47805, 40623, 31115, 24169, 22873, 26462, 31345, 35203,
        36493, 35725, 33671, 31872, 31098, 30840, 31097, 31866, 32637, 33152, 33153, 32640, 32126, 31868, 31611, 32124,
        32638, 32896, 32897, 32640, 32126, 31612, 31611, 31611, 32124, 32894, 33153, 33409, 32897, 32127, 31355, 30841,
        31353, 32380, 33408, 33923, 33411, 32127, 31099, 30840, 31353, 32380, 33152, 33666, 33411, 32640, 31613, 31097,
        31097, 31866, 32894, 33153, 33154, 32897, 32383, 31868, 31611, 31867, 32124, 32381, 32382, 32639, 32638, 32639,
        32639, 32639, 32126, 31868, 31868, 31868, 32124, 32381, 32639, 32896, 32896, 32639, 32126, 31868, 31611, 31868,
        32381, 32639, 32896, 32640, 32383, 31869, 31868, 32125, 32382, 32639, 32382, 32382, 32639, 32639, 32639, 32639,
        32382, 32126, 31612, 31355, 31610, 32124, 33151, 33666, 33667, 32641, 31613, 30841, 30839, 31609, 32893, 33665,
        33668, 33154, 32127, 31612, 31354, 31610, 32124, 32382, 32126, 32382, 33408, 34693, 34952, 32901, 29049, 25706,
        25954, 30828, 38534, 44195, 43695, 35485, 23667, 15432, 16441, 27474, 42120, 51643, 50380, 38833, 23929, 14150,
        15156, 25163, 37755, 45734, 45750, 39080, 30599, 24681, 23643, 26977, 31602, 35203, 36493, 35982, 34441, 32386,
        30843, 30070, 30325, 31352, 32380, 33408, 33923, 33412, 32641, 31613, 31354, 31610, 32124, 32894, 33152, 32640,
        32383, 31869, 31868, 32124, 32382, 32639, 32639, 32382, 32125, 31869, 32124, 32382, 32639, 32639, 32383, 32126,
        31868, 31868, 32124, 32382, 32895, 33153, 32640, 32383, 31869, 31611, 31611, 32124, 32895, 33153, 32897, 32383,
        31869, 31612, 32124, 32638, 32896, 32896, 32127, 31612, 31611, 31867, 32637, 33409, 33410, 32897, 31870, 31355,
        31097, 31353, 32380, 33409, 33667, 33155, 32384, 31612, 31354, 31610, 32124, 32382, 32895, 32896, 32896, 32639,
        32382, 32125, 31868, 32124, 32381, 32382, 32382, 32125, 32125, 32381, 32639, 32896, 32896, 32383, 31356, 31097,
        31353, 32380, 33409, 33924, 33412, 32128, 30842, 30583, 31352, 32636, 33666, 33668, 32898, 31870, 31354, 31353,
        31867, 32894, 32896, 32640, 31870, 31612, 32637, 33921, 34437, 33157, 30076, 27503, 27241, 31088, 37253, 41627,
        40867, 33939, 24690, 19026, 20809, 29792, 41355, 48049, 45755, 35745, 24180, 17228, 19010, 27736, 38273, 44452,
        43438, 37022, 29569, 24679, 24670, 28262, 32887, 35975, 36494, 35213, 33157, 31357, 30584, 30582, 31095, 31866,
        32894, 33409, 33667, 33154, 32383, 31612, 31354, 31611, 32381, 32895, 32897, 32640, 32126, 31868, 31868, 32125,
        32382, 32895, 32640, 32382, 31869, 31612, 31868, 32637, 32896, 33153, 32640, 32126, 31611, 31354, 31867, 32381,
        33152, 33153, 32896, 32383, 31869, 31611, 31867, 32381, 32638, 32639, 32639, 32383, 32126, 32125, 32125, 32381,
        32638, 32383, 32382, 31869, 31868, 32124, 32638, 33152, 33153, 32640, 31870, 31355, 31097, 31866, 32894, 33409,
        33411, 32641, 31870, 31355, 31354, 32123, 32638, 32896, 32897, 32383, 31869, 31868, 32124, 32381, 32895, 32896,
        32383, 31869, 31612, 31611, 32124, 32638, 33153, 33410, 32641, 31869, 31098, 31097, 31610, 32893, 33666, 33924,
        33155, 31871, 30841, 30583, 31609, 32893, 33666, 33924, 32898, 31870, 31098, 31353, 32123, 32894, 33153, 32384,
        31869, 31868, 32637, 33921, 34181, 32643, 30074, 27760, 28267, 31859, 36998, 40345, 39069, 33167, 25458, 21080,
        22866, 30566, 40074, 45481, 43184, 34970, 25204, 19797, 21581, 28768, 37249, 42398, 41382, 36249, 29824, 25963,
        25955, 28777, 32888, 35462, 35981, 34698, 32899, 31356, 30584, 30840, 31610, 32381, 32639, 32896, 32897, 32640,
        32382, 31869, 31611, 31868, 32381, 32639, 32896, 32896, 32127, 31612, 31611, 31867, 32638, 32896, 32896, 32639,
        31869, 31612, 31868, 32381, 32639, 32896, 32640, 32126, 31868, 31611, 31868, 32381, 32895, 32896, 32640, 32126,
        31869, 31868, 32124, 32381, 32382, 32638, 32383, 32382, 32126, 32125, 32382, 32639, 32640, 32383, 31869, 31611,
        31611, 32124, 32894, 33409, 33410, 32641, 31613, 31098, 31096, 31610, 32893, 33666, 33668, 32898, 31870, 31355,
        31097, 31610, 32637, 33152, 33153, 32896, 32127, 31612, 31611, 32124, 32638, 32896, 32896, 32383, 31869, 31611,
        31867, 32381, 33152, 33410, 33154, 32127, 31099, 30584, 31352, 32636, 33666, 34181, 33413, 32128, 30586, 30326,
        31095, 32636, 33922, 34437, 33413, 32127, 30842, 30583, 31352, 32637, 33409, 33154, 32640, 31869, 32124, 32895,
        33153, 32641, 30844, 29301, 29554, 32375, 35973, 38290, 37013, 32392, 26482, 23391, 25180, 31597, 39050, 42914,
        40870, 33939, 25972, 21850, 23638, 30055, 36996, 40858, 39839, 34962, 29565, 26475, 26982, 30062, 33404, 35463,
        35467, 34184, 32385, 31099, 30839, 31352, 32124, 32639, 32896, 32639, 32382, 32126, 32125, 32381, 32382, 32383,
        32382, 32125, 32125, 32125, 32125, 32382, 32639, 32639, 32639, 32383, 32126, 31868, 31867, 32124, 32638, 32896,
        32897, 32640, 32126, 31611, 31611, 32124, 32638, 33152, 32897, 32383, 31869, 31611, 31867, 32381, 32639, 32896,
        32640, 32126, 31869, 31867, 32124, 32382, 32895, 32896, 32640, 32126, 31612, 31611, 31867, 32381, 32895, 33409,
        33154, 32384, 31613, 31098, 31353, 31867, 32894, 33666, 33667, 32897, 31870, 31355, 31354, 31610, 32380, 33152,
        33153, 32897, 32126, 31868, 31612, 32124, 32382, 32639, 32639, 32383, 32126, 31869, 31868, 32125, 32895, 33152,
        32897, 32127, 31356, 31097, 31610, 32637, 33409, 33667, 32898, 31870, 31098, 31096, 31609, 32637, 33409, 33411,
        32897, 32127, 31611, 31354, 31867, 32381, 32895, 32640, 32383, 32126, 32381, 32894, 33152, 32640, 31356, 29815,
        29811, 32120, 34946, 37005, 36496, 32904, 28279, 25447, 26467, 31087, 37253, 40602, 39326, 34192, 27768, 24163,
        25182, 29802, 35456, 38802, 38552, 34960, 30848, 28017, 27756, 29808, 32634, 34435, 35208, 34183, 32642, 31356,
        30841, 31096, 31867, 32637, 32896, 33153, 32896, 32126, 31869, 31612, 31868, 32381, 32639, 32896, 32639, 32126,
        31868, 31867, 32125, 32638, 32896, 32896, 32383, 31869, 31612, 31867, 32124, 32638, 33153, 32897, 32383, 31869,
        31355, 31611, 32124, 32894, 33152, 32896, 32383, 31612, 31611, 32124, 32638, 32896, 32639, 32382, 31869, 31868,
        32124, 32382, 32895, 32896, 32640, 32126, 31612, 31354, 31867, 32381, 33152, 33410, 33154, 32384, 31356]

wave_array=np.array(wave)
WaveMax=max(wave_array[0:80])  # 设置归一化的参数值
wave_01=wave_array/WaveMax     # 归一化

# 设置闸门参数
GateStart1=7
GateEnd1=10
GateHeight1=0.65
GateHeight2=0.65
GateStart2=16
GateEnd2=19

CALC_MODE = 2     #壁厚计算模式
SAMPLE_FREQ = 50  # 采样频率
SONIC_VEL = 5948  # 初始声速
SEARCH_THRESHOLD=0.6  # 设置搜索门槛
SEARCH_CYCLE=10       # 设置搜索周期
thickness=0.0         # 初始化壁厚




X=np.array(range(1000))  # 设置横轴
wave_x=X*(1/SAMPLE_FREQ/1000)*SONIC_VEL/2  # 横轴换算为壁厚

plt.figure(figsize=(15,8),facecolor='k')   # 设置画布

# 绘制闸门1
x1=np.array(range(GateStart1,GateEnd1+1))
y1=np.ones(len(x1))*GateHeight1
plt.plot(x1,y1,linewidth='2.0',c='red')
# 绘制首尾两点
x1_start=GateStart1
x1_end=GateEnd1
y1_start=y1_end=y1[0]
plt.scatter(x1_start,y1_start,c='red',marker='*')  # 起始点
plt.scatter(x1_end,y1_end,c='red',marker='*')     # 终止点
plt.text(x1_end,y1_end,r'$A$',size=20,c='r')      # 闸门1字母表示

# 绘制闸门2
x2=np.array(range(GateStart2,GateEnd2+1))
y2=np.ones(len(x2))*GateHeight2
plt.plot(x2,y2,linewidth='2.0',c='green')
# 绘制首尾两点
x2_start=GateStart2
x2_end=GateEnd2
y2_start=y2_end=y2[0]
plt.scatter(x2_start,y2_start,c='green',marker='*')  # 起始点
plt.scatter(x2_end,y2_end,c='green',marker='*')      # 终止点
plt.text(x2_end,y2_end,r'$B$',size=20,c='g')         # 闸门2字母表示

# 显示通道型号
plt.text(0,0.9,r"$channel\ 1$",size=20,c='r',)
# 显示测厚范围
plt.rcParams['font.sans-serif']=['SimHei']
plt.text(0.1,-0.05,r"范围 20mm{}".format(' '*74),size=20,c='white')\
        .set_bbox(dict(facecolor='g',edgecolor='white',))  # 设置边框


# 隐藏坐标轴和刻度
ax=plt.gca()
ax.spines['left'].set_color('none')
ax.spines['right'].set_color('none')
ax.spines['top'].set_color('none')
ax.spines['bottom'].set_color('none')
plt.xticks(c='k')
plt.yticks(c='k')


# 计算壁厚
  # 搜索回波点
y_index=0                                 # 循环起始点
y_end_index=list(wave_x).index(20.40164)  # 循环终止点 343
x_peak_value=[]                           # 设置回波点列表
while y_index <= y_end_index:
        if wave_01[y_index]<SEARCH_THRESHOLD:
                y_index += 1
                continue                  #小于门槛则跳过
        else:
                x_start=wave_x[y_index]                                      # 设置搜索周期内的起点
                x_start_index_0=list(wave_x).index(x_start)                  # 返回x_start的索引值
                x_end=wave_x[y_index+SEARCH_CYCLE]                           # 设置搜索周期内的终点
                x_end_index = list(wave_x).index(x_end)                      # 返回x_end的索引值
                wave_max_SE = max(wave_01[x_start_index_0:x_end_index + 1])  # 搜索周期内最大值
        while wave_max_SE >= SEARCH_THRESHOLD and x_end_index <= y_end_index:
                x_start = wave_x[x_end_index]                              # 下一个搜索周期起点
                x_start_index = list(wave_x).index(x_start)                # 索引
                x_end=wave_x[x_end_index+SEARCH_CYCLE]                     # 下一个搜索周期终点
                x_end_index = list(wave_x).index(x_end)                    # 索引
                wave_max_SE = max(wave_01[x_start_index:x_end_index + 1])  # 每个搜索周期内最大值
        wave_period=list(wave_01[x_start_index_0:x_end_index+1])                      # 创建搜索值列表
        wave_max_S0E=max(wave_01[x_start_index_0:x_end_index + 1])                    # 每个大搜索中的最大值
        x_peak_value.append(wave_x[wave_period.index(wave_max_S0E)+x_start_index_0])  # 添加回波点
        y_index=x_end_index+1         # 更新整个搜索
# print(x_peak_value)


# thk = d_peak_value * (1 / sample_freq / 1000) * sonic_vel / 2  # 单位：mm
#根据模式计算相应壁厚
if CALC_MODE==1:              # 一次回波
        thickness=x_peak_value[1]
elif CALC_MODE==2:            # 回波到回波
        if len(x_peak_value)>=3:
                thickness=x_peak_value[2]-x_peak_value[1]
        else:                     # 回波点个数不足，采用一次回波
                thickness = x_peak_value[1]
elif CALC_MODE==3:            # 二次回波
        if len(x_peak_value)>=3:
                thickness=x_peak_value[2]/2
        else:                     # 回波点个数不足，采用一次回波
                thickness = x_peak_value[1]
else:
        if len(x_peak_value)>=3:     # 首选回波到回波
                thickness=x_peak_value[2]-x_peak_value[1]
        else:                        # 回波点个数不足，采用一次回波
                thickness = x_peak_value[1]
# print(thickness)



# 显示壁厚值
plt.text(GateEnd1+0.5,GateHeight1+0.1,r"$T:\ {:.2f}mm$".format(thickness),size=24,c='r')



ax.set_facecolor('k')   # 设置背景颜色
plt.plot(wave_x,wave_01,linewidth='1.0',c='y')  # 绘图
plt.grid(linestyle='-',color='g')  # 设置网格线
plt.xlim((0,20))   # 限制范围
plt.show()